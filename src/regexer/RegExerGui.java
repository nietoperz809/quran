package regexer;


import java.awt.Color;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JInternalFrame;
import mixit.Sliders;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PetSel
 */
public class RegExerGui extends JInternalFrame
{
    /**
     * Creates new form NewFrame
     */
    public RegExerGui()
    {
        initComponents();
        setSize(800, 400);
        setVisible(true);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setOpaque(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        button1 = new java.awt.Button();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        source = new java.awt.TextField();
        regex = new java.awt.TextField();
        textOut = new java.awt.TextArea();
        label3 = new java.awt.Label();
        replace = new java.awt.TextField();
        check_case_insensitive = new java.awt.Checkbox();
        check_multiline = new java.awt.Checkbox();
        check_dotall = new java.awt.Checkbox();
        check_unicode_case = new java.awt.Checkbox();
        check_canon_eq = new java.awt.Checkbox();

        button1.setLabel("button1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RegExer");
        setBackground(new java.awt.Color(153, 255, 255));
        setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        setName("RegExer"); // NOI18N

        label1.setText("Source Text");

        label2.setText("RegEx");

        source.addTextListener(new java.awt.event.TextListener()
        {
            public void textValueChanged(java.awt.event.TextEvent evt)
            {
                sourceTextValueChanged(evt);
            }
        });

        regex.addTextListener(new java.awt.event.TextListener()
        {
            public void textValueChanged(java.awt.event.TextEvent evt)
            {
                regexTextValueChanged(evt);
            }
        });

        textOut.setBackground(new java.awt.Color(0, 0, 0));
        textOut.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textOut.setEditable(false);
        textOut.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        textOut.setForeground(new java.awt.Color(255, 255, 0));
        textOut.setText("Welcome to REGEXER!");

        label3.setText("Replace");

        replace.addTextListener(new java.awt.event.TextListener()
        {
            public void textValueChanged(java.awt.event.TextEvent evt)
            {
                replaceTextValueChanged(evt);
            }
        });

        check_case_insensitive.setLabel("CASE_INSENSITIVE");
        check_case_insensitive.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                check_case_insensitiveItemStateChanged(evt);
            }
        });

        check_multiline.setLabel("MULTILINE");
        check_multiline.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                check_multilineItemStateChanged(evt);
            }
        });

        check_dotall.setLabel("DOTALL");
        check_dotall.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                check_dotallItemStateChanged(evt);
            }
        });

        check_unicode_case.setLabel("UNICODE_CASE");
        check_unicode_case.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                check_unicode_caseItemStateChanged(evt);
            }
        });

        check_canon_eq.setLabel("CANON_EQ");
        check_canon_eq.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                check_canon_eqItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(check_case_insensitive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_multiline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_dotall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_unicode_case, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_canon_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(source, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(replace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(replace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(check_case_insensitive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_multiline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_dotall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_unicode_case, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_canon_eq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textOut, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setOut(String s)
    {
        textOut.setText(s);
    }

    private void addException (Exception ex)
    {
        addOut (ex.getClass().getSimpleName());
    }
    
    private void addOut(String s)
    {
        StringBuilder before = new StringBuilder(textOut.getText());
        before.append(s);
        textOut.setText(before.toString());
    }
    private void addOut(boolean s)
    {
        addOut (s ? "true" : "false");
    }
    
    private void doCalculation()
    {
        String src = source.getText();
        String rex = regex.getText();
        String rep = replace.getText();
        int flags = 0;
        Pattern pat = null;
        Matcher match = null;
        
        if (check_canon_eq.getState() == true)
            flags |= Pattern.CANON_EQ;
        if (check_case_insensitive.getState() == true)
            flags |= Pattern.CASE_INSENSITIVE;
        if (check_dotall.getState() == true)
            flags |= Pattern.DOTALL;
        if (check_multiline.getState() == true)
            flags |= Pattern.MULTILINE;
        if (check_unicode_case.getState() == true)
            flags |= Pattern.UNICODE_CASE;
        
        setOut ("String.matches --- ");
        try
        {
            addOut (src.matches(rex));
        }
        catch (Exception ex)
        {
            addException (ex);
        }
        
        addOut ("\nString.replace --- ");
        try
        {
            addOut (src.replace(rex, rep));
        }
        catch (Exception ex)
        {
            addException (ex);
        }
        
        addOut ("\nPatter flags --- " + flags);
        addOut ("\nPattern --- ");
        try
        {
            pat = Pattern.compile(rex, flags);
            addOut (pat.toString());
        }
        catch (Exception ex)
        {
            addException (ex);
        }
        
        addOut ("\nMatcher.find --- ");
        try
        {
            match = pat.matcher(src);
            addOut (match.find());
            addOut ("\nMatcher.group --- ");
            try
            {
                 addOut (match.group());
            }
            catch (Exception ex)
            {
                addException (ex);
            }
        }
        catch (Exception ex)
        {
            addException (ex);
        }
    }
    
    private void sourceTextValueChanged(java.awt.event.TextEvent evt)//GEN-FIRST:event_sourceTextValueChanged
    {//GEN-HEADEREND:event_sourceTextValueChanged
        doCalculation();
    }//GEN-LAST:event_sourceTextValueChanged

    private void regexTextValueChanged(java.awt.event.TextEvent evt)//GEN-FIRST:event_regexTextValueChanged
    {//GEN-HEADEREND:event_regexTextValueChanged
        doCalculation();
    }//GEN-LAST:event_regexTextValueChanged

    private void replaceTextValueChanged(java.awt.event.TextEvent evt)//GEN-FIRST:event_replaceTextValueChanged
    {//GEN-HEADEREND:event_replaceTextValueChanged
         doCalculation();
    }//GEN-LAST:event_replaceTextValueChanged

    private void check_case_insensitiveItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_case_insensitiveItemStateChanged
    {//GEN-HEADEREND:event_check_case_insensitiveItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_case_insensitiveItemStateChanged

    private void check_multilineItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_multilineItemStateChanged
    {//GEN-HEADEREND:event_check_multilineItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_multilineItemStateChanged

    private void check_dotallItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_dotallItemStateChanged
    {//GEN-HEADEREND:event_check_dotallItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_dotallItemStateChanged

    private void check_unicode_caseItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_unicode_caseItemStateChanged
    {//GEN-HEADEREND:event_check_unicode_caseItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_unicode_caseItemStateChanged

    private void check_canon_eqItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_canon_eqItemStateChanged
    {//GEN-HEADEREND:event_check_canon_eqItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_canon_eqItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RegExerGui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Checkbox check_canon_eq;
    private java.awt.Checkbox check_case_insensitive;
    private java.awt.Checkbox check_dotall;
    private java.awt.Checkbox check_multiline;
    private java.awt.Checkbox check_unicode_case;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.TextField regex;
    private java.awt.TextField replace;
    private java.awt.TextField source;
    private java.awt.TextArea textOut;
    // End of variables declaration//GEN-END:variables
}
