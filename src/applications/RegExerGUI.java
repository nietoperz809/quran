package applications;


import java.awt.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.GroupLayout;
import javax.swing.JInternalFrame;
import javax.swing.LayoutStyle;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PetSel
 */
public class RegExerGUI extends JInternalFrame
{
    /**
     * Creates new form NewFrame
     */
    public RegExerGUI()
    {
        initComponents();
        setSize(800, 400);
        setVisible(true);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setOpaque(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        label1 = new Label();
        label2 = new Label();
        source = new TextField();
        regex = new TextField();
        textOut = new TextArea();
        label3 = new Label();
        replace = new TextField();
        check_case_insensitive = new Checkbox();
        check_multiline = new Checkbox();
        check_dotall = new Checkbox();
        check_unicode_case = new Checkbox();
        check_canon_eq = new Checkbox();
        button1 = new Button();

        //======== this ========
        setTitle("RegExer");
        setName("RegExer");
        Container contentPane = getContentPane();

        //---- label1 ----
        label1.setText("Source Text");

        //---- label2 ----
        label2.setText("RegEx");

        //---- source ----
        source.addTextListener(e -> sourceTextValueChanged(e));

        //---- regex ----
        regex.addTextListener(e -> regexTextValueChanged(e));

        //---- textOut ----
        textOut.setEditable(false);
        textOut.setText("Welcome to REGEXER!");

        //---- label3 ----
        label3.setText("Replace");

        //---- replace ----
        replace.addTextListener(e -> replaceTextValueChanged(e));

        //---- check_case_insensitive ----
        check_case_insensitive.setLabel("CASE_INSENSITIVE");
        check_case_insensitive.addItemListener(e -> check_case_insensitiveItemStateChanged(e));

        //---- check_multiline ----
        check_multiline.setLabel("MULTILINE");
        check_multiline.addItemListener(e -> check_multilineItemStateChanged(e));

        //---- check_dotall ----
        check_dotall.setLabel("DOTALL");
        check_dotall.addItemListener(e -> check_dotallItemStateChanged(e));

        //---- check_unicode_case ----
        check_unicode_case.setLabel("UNICODE_CASE");
        check_unicode_case.addItemListener(e -> check_unicode_caseItemStateChanged(e));

        //---- check_canon_eq ----
        check_canon_eq.setLabel("CANON_EQ");
        check_canon_eq.addItemListener(e -> check_canon_eqItemStateChanged(e));

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(textOut, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(check_case_insensitive, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(check_multiline, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(check_dotall, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(check_unicode_case, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(check_canon_eq, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 14, Short.MAX_VALUE))
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addComponent(label1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(label2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(label3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addComponent(source, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(regex, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(replace, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                        .addComponent(label1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(source, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(label2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(regex, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(replace, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(label3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                        .addComponent(check_case_insensitive, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(check_multiline, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(check_dotall, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(check_unicode_case, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(check_canon_eq, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(textOut, GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addContainerGap())
        );

        //---- button1 ----
        button1.setLabel("button1");
    }// </editor-fold>//GEN-END:initComponents

    private void setOut(String s)
    {
        textOut.setText(s);
    }

    private void addException (Exception ex)
    {
        addOut (ex.getClass().getSimpleName());
    }
    
    private void addOut(String s)
    {
        StringBuilder before = new StringBuilder(textOut.getText());
        before.append(s);
        textOut.setText(before.toString());
    }
    private void addOut(boolean s)
    {
        addOut (s ? "true" : "false");
    }
    
    private void doCalculation()
    {
        String src = source.getText();
        String rex = regex.getText();
        String rep = replace.getText();
        int flags = 0;
        Pattern pat = null;
        Matcher match = null;
        
        if (check_canon_eq.getState() == true)
            flags |= Pattern.CANON_EQ;
        if (check_case_insensitive.getState() == true)
            flags |= Pattern.CASE_INSENSITIVE;
        if (check_dotall.getState() == true)
            flags |= Pattern.DOTALL;
        if (check_multiline.getState() == true)
            flags |= Pattern.MULTILINE;
        if (check_unicode_case.getState() == true)
            flags |= Pattern.UNICODE_CASE;
        
        setOut ("String.matches --- ");
        try
        {
            addOut (src.matches(rex));
        }
        catch (Exception ex)
        {
            addException (ex);
        }
        
        addOut ("\nString.replace --- ");
        try
        {
            addOut (src.replace(rex, rep));
        }
        catch (Exception ex)
        {
            addException (ex);
        }
        
        addOut ("\nPatter flags --- " + flags);
        addOut ("\nPattern --- ");
        try
        {
            pat = Pattern.compile(rex, flags);
            addOut (pat.toString());
        }
        catch (Exception ex)
        {
            addException (ex);
        }
        
        addOut ("\nMatcher.find --- ");
        try
        {
            match = pat.matcher(src);
            addOut (match.find());
            addOut ("\nMatcher.group --- ");
            try
            {
                 addOut (match.group());
            }
            catch (Exception ex)
            {
                addException (ex);
            }
        }
        catch (Exception ex)
        {
            addException (ex);
        }
    }
    
    private void sourceTextValueChanged(java.awt.event.TextEvent evt)//GEN-FIRST:event_sourceTextValueChanged
    {//GEN-HEADEREND:event_sourceTextValueChanged
        doCalculation();
    }//GEN-LAST:event_sourceTextValueChanged

    private void regexTextValueChanged(java.awt.event.TextEvent evt)//GEN-FIRST:event_regexTextValueChanged
    {//GEN-HEADEREND:event_regexTextValueChanged
        doCalculation();
    }//GEN-LAST:event_regexTextValueChanged

    private void replaceTextValueChanged(java.awt.event.TextEvent evt)//GEN-FIRST:event_replaceTextValueChanged
    {//GEN-HEADEREND:event_replaceTextValueChanged
         doCalculation();
    }//GEN-LAST:event_replaceTextValueChanged

    private void check_case_insensitiveItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_case_insensitiveItemStateChanged
    {//GEN-HEADEREND:event_check_case_insensitiveItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_case_insensitiveItemStateChanged

    private void check_multilineItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_multilineItemStateChanged
    {//GEN-HEADEREND:event_check_multilineItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_multilineItemStateChanged

    private void check_dotallItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_dotallItemStateChanged
    {//GEN-HEADEREND:event_check_dotallItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_dotallItemStateChanged

    private void check_unicode_caseItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_unicode_caseItemStateChanged
    {//GEN-HEADEREND:event_check_unicode_caseItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_unicode_caseItemStateChanged

    private void check_canon_eqItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_check_canon_eqItemStateChanged
    {//GEN-HEADEREND:event_check_canon_eqItemStateChanged
        doCalculation();
    }//GEN-LAST:event_check_canon_eqItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RegExerGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private Label label1;
    private Label label2;
    private TextField source;
    private TextField regex;
    private TextArea textOut;
    private Label label3;
    private TextField replace;
    private Checkbox check_case_insensitive;
    private Checkbox check_multiline;
    private Checkbox check_dotall;
    private Checkbox check_unicode_case;
    private Checkbox check_canon_eq;
    private Button button1;
    // End of variables declaration//GEN-END:variables
}
