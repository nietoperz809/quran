package applications;

import misc.MDIChild;
import misc.MathParser;
import misc.Tools;
import org.mariuszgromada.math.mxparser.Expression;

import javax.swing.*;
import java.awt.*;
import java.math.BigDecimal;
import java.text.DecimalFormat;

/**
 * Created by Administrator on 11/15/2016.
 */
public class CalculatorGUI extends MDIChild
{
    private JTextArea outputArea;
    private JPanel panel1;
    private JTextField inputField;
    private JButton clearButton;
    private JButton toClipButton;
    private JList parserList;
    private DecimalFormat decimalFormat;

    public CalculatorGUI ()
    {
        super();

        decimalFormat = new DecimalFormat("##########.############################");
        parserList.setSelectedIndex(0); // UdoParser

        this.add(panel1);
        outputArea.setBackground(Color.BLACK);
        outputArea.setForeground(Color.GREEN);
        outputArea.setFont(new Font("monospaced", Font.PLAIN, 16));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Math Tool");
        setSize(500, 300);
        setVisible(true);
        inputField.addActionListener(e ->
        {
            switch (parserList.getSelectedIndex())
            {
                case 0:
                    runUdoParser();
                    break;
                case 1:
                    runMxParser();
                    break;
            }
            inputField.setText("");
        });
        clearButton.addActionListener(e -> outputArea.setText(""));
        toClipButton.addActionListener(e -> Tools.toClipBoard(outputArea.getText()));
    }

    private String lBegin ()
    {
        if (outputArea.getText().length() == 0)
        {
            return "";
        }
        else
        {
            return "\n";
        }
    }

    private void runMxParser ()
    {
        String in = inputField.getText();
        Expression e = new Expression(in);
        double d = e.calculate();
        outputArea.append(lBegin() + in + " = " + d);
    }

    private void runUdoParser ()
    {
        String[] splits = inputField.getText().split(":");
        for (String s : splits)
        {
            String sraw = s;
            s = s.replaceAll("\\s+", ""); // remove whitespace
            s = s.replace("!", "!0");  // fake op for factorial
            s = s.replace("~", "0~"); // fake op for negation
            s = Tools.realReplaceAll(s, "(+(", "(0+(");  // fix unary + bug
            s = Tools.realReplaceAll(s, "(-(", "(0-(");  // fix unary - bug
            if (s.startsWith("-") || s.startsWith("+"))
            {
                s = "0" + s;
            }
            MathParser mathParser = new MathParser(s);
            try
            {
                BigDecimal b = mathParser.eval();
                String format = decimalFormat.format(b);
                outputArea.append(lBegin() + sraw + " = " + format);
            }
            catch (Exception ex)
            {
                outputArea.append(lBegin() + ex.getMessage());
            }
        }
    }

    @Override
    public void initAfterDeserialization ()
    {

    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$ (String fontName, int style, int size, Font currentFont)
    {
        if (currentFont == null)
        {
            return null;
        }
        String resultName;
        if (fontName == null)
        {
            resultName = currentFont.getName();
        }
        else
        {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1'))
            {
                resultName = fontName;
            }
            else
            {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$ ()
    {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        inputField = new JTextField();
        inputField.setToolTipText("Use : to separate multiple calculations");
        panel1.add(inputField, BorderLayout.NORTH);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, BorderLayout.CENTER);
        outputArea = new JTextArea();
        outputArea.setForeground(new Color(-16777216));
        scrollPane1.setViewportView(outputArea);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(panel2, BorderLayout.SOUTH);
        clearButton = new JButton();
        clearButton.setText("Clear");
        panel2.add(clearButton);
        toClipButton = new JButton();
        toClipButton.setText("toClip");
        panel2.add(toClipButton);
        parserList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("UdoParser");
        defaultListModel1.addElement("MxParser");
        parserList.setModel(defaultListModel1);
        parserList.setPreferredSize(new Dimension(100, 40));
        parserList.setSelectedIndex(-1);
        parserList.setSelectionBackground(new Color(-1700082));
        parserList.setSelectionForeground(new Color(-1));
        parserList.setToolTipText("Select Parser");
        panel2.add(parserList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$ ()
    {
        return panel1;
    }
}
