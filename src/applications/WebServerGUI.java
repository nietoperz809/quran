/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applications;

import java.awt.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.JInternalFrame;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import javax.swing.event.*;
import inetserver.Sockserver;
import java.awt.Color;
import javax.swing.SwingUtilities;
import misc.Tools;

/**
 *
 * This is the GUI class for the web server
 */
public class WebServerGUI extends JInternalFrame
{
    private static final long serialVersionUID = 1L;
    private Sockserver sockserver;
    
    /**
     * Constructor: creates new form WebServerGUI
     */
    public WebServerGUI()
    {
        initComponents();
        button.setBackground(Color.RED);
    }

//    public Sockserver getServer()
//    {
//        return sockserver;
//    }
//    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        pathTxt = new JTextField();
        portTxt = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        button = new JToggleButton();
        transmitted = new JLabel();
        fileTime = new JLabel();
        jLabel4 = new JLabel();
        jLabel3 = new JLabel();
        buffSizeTxt = new JTextField();

        //======== this ========
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Webserver");
        addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                formInternalFrameClosed(e);
            }
        });
        Container contentPane = getContentPane();

        //---- pathTxt ----
        pathTxt.setText("F:\\\\");

        //---- portTxt ----
        portTxt.setText("80");

        //---- jLabel1 ----
        jLabel1.setText("BasePath");

        //---- jLabel2 ----
        jLabel2.setText("Port");

        //---- button ----
        button.setText("Start");
        button.setDoubleBuffered(true);
        button.addActionListener(e -> buttonActionPerformed(e));

        //---- transmitted ----
        transmitted.setText("0");
        transmitted.setToolTipText("Bytes transferred ...");
        transmitted.setDoubleBuffered(true);
        transmitted.setOpaque(true);

        //---- fileTime ----
        fileTime.setText("0");
        fileTime.setBorder(new BevelBorder(BevelBorder.RAISED));

        //---- jLabel4 ----
        jLabel4.setText("time:");

        //---- jLabel3 ----
        jLabel3.setText("Buffer");

        //---- buffSizeTxt ----
        buffSizeTxt.setText("113072");

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(portTxt))
                        .addComponent(jLabel1)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buffSizeTxt, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(transmitted, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel4)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fileTime, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(button, GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                        .addComponent(pathTxt))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(pathTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(portTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(transmitted, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                                .addComponent(fileTime)
                                .addComponent(jLabel4))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(buffSizeTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 3, Short.MAX_VALUE))
                        .addComponent(button, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
        );
        }// </editor-fold>//GEN-END:initComponents

    /**
     * called when this frame is closed
     * @param evt 
     */
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosed
    {//GEN-HEADEREND:event_formInternalFrameClosed
        if (sockserver != null)
            sockserver.halt();
    }//GEN-LAST:event_formInternalFrameClosed

    public String getBasePath()
    {
        return pathTxt.getText();
    }
    
    
    private void buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonActionPerformed
    {//GEN-HEADEREND:event_buttonActionPerformed
        if (button.isSelected())
        {
            // start server
            int port = Integer.parseInt(portTxt.getText());
            int buffSize = Integer.parseInt(buffSizeTxt.getText());
            sockserver = new Sockserver (buffSize, port, this);
            button.setText("stop");
            button.setBackground(Color.GREEN);
        }
        else
        {
            // stop server
            sockserver.halt();
            sockserver = null;
            button.setText("start");
            button.setBackground(Color.RED);
        }
    }//GEN-LAST:event_buttonActionPerformed
    
    /**
     * Called from webserver worker threads to update counter display
     * @param byteCount
     */
    public void showBytesTransmitted (long byteCount, long filetime)
    {
        SwingUtilities.invokeLater(() ->
        {
            transmitted.setText (Tools.humanReadableByteCount(byteCount));
            fileTime.setText (Tools.humanReadableByteCount(filetime));
            repaint();
        });        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JTextField pathTxt;
    private JTextField portTxt;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JToggleButton button;
    private JLabel transmitted;
    private JLabel fileTime;
    private JLabel jLabel4;
    private JLabel jLabel3;
    private JTextField buffSizeTxt;
    // End of variables declaration//GEN-END:variables

}
