/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package magnify;

import applications.MagnifyGUI;
import java.awt.AWTException;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import misc.ClipboardImage;
import misc.MainWindow;
import misc.TextInputDlg;
import misc.Tools;
import twitter.TwitTools;

/**
 *
 * @author Administrator
 */
public class MagnifyPanel extends javax.swing.JPanel
{
    private static final long serialVersionUID = 1L;
    private Robot robot;
    private BufferedImage _image;
    private Rectangle _rect = new Rectangle();
    private Point _point;
    private Rectangle _saveRect;
    private MagnifyGUI _gui;
    
    /**
     * Creates new form magnifyPanel
     * @param gui JInternalFrame holding this Panel
     */
    public MagnifyPanel (MagnifyGUI gui)
    {
        _gui = gui;
        try
        {
            robot = new Robot();
            initComponents();
        }
        catch (AWTException ex)
        {
            Logger.getLogger(MagnifyPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setBackground(new java.awt.Color(51, 204, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
    {//GEN-HEADEREND:event_formMouseDragged
        _point = evt.getPoint();
        //System.out.println(pt);
    }//GEN-LAST:event_formMouseDragged
    
    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
        if (_gui.getHideMode())
        {
            _saveRect = MainWindow.getInstance().getBounds();
            MainWindow.getInstance().setBounds(10000, 10000, 1, 1);
        }
        else
        {
            _gui.setVisible(false);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
        if (_point != null)
        {
            javax.swing.SwingUtilities.convertPointToScreen(_point, this);

            _rect.width = getWidth();
            _rect.height = getHeight();
            _rect.x = _point.x - _rect.width/2;
            _rect.y = _point.y - _rect.height/2;

            if (_rect.width < 0 || _rect.height < 0)
                return;

            _image = robot.createScreenCapture(_rect);
        }
        if (_gui.getHideMode())
        {
            MainWindow.getInstance().setBounds(_saveRect);
        }
        else
        {
            _gui.setVisible(true);
            repaint();
        }
        doAutoSave();
    }//GEN-LAST:event_formMouseReleased

    @Override
    public void paintComponent(Graphics g)
    {
        g.drawImage(_image, 0, 0, getWidth(), getHeight(), null);
    }

    private BufferedImage toNewSize()
    {
        if (_image == null)
            return null;
        return Tools.resizeImage(_image, getWidth(), getHeight());
    }
    
    private int savCtr;
    private void doAutoSave()
    {
        String path = _gui.getAutosavePath();
        if (path == null)
            return;
        if (_gui.isAutoSaveChanged())
            savCtr = 0;
        path = System.getProperty("user.home") + "\\" + path;
        if (!path.endsWith("\\"))
            path = path + "\\";
        new File(path).mkdir();
        String fname;
        do
        {
            savCtr++;
            fname = path + "img" + savCtr + ".png";
        } while (new File(fname).exists());
        Tools.saveImage(fname, _image, false);
    }
    
    public boolean save(boolean jpeg)
    {
        if (_image == null)
        {
            return false;
        }
        return Tools.saveImage (_image, jpeg);
    }
    
    public boolean toClipboard()
    {
        if (_image == null)
        {
            return false;
        }
        new ClipboardImage(toNewSize());
        return true;
    }

    public boolean tweet()
    {
        String txt = TextInputDlg.getInput (MainWindow.getFrames()[0]);
//        System.out.println(s);
//        return false;
        if (_image == null)
        {
            return false;
        }
        TwitTools.get().sendAsync(toNewSize(), txt);
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
